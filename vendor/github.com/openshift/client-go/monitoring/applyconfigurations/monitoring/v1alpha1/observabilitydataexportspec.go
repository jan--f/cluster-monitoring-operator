// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	monitoringv1alpha1 "github.com/openshift/api/monitoring/v1alpha1"
)

// ObservabilityDataExportSpecApplyConfiguration represents an declarative configuration of the ObservabilityDataExportSpec type for use
// with apply.
type ObservabilityDataExportSpecApplyConfiguration struct {
	Sources         []DataSourceApplyConfiguration         `json:"sources,omitempty"`
	Transformations []DataTransformationApplyConfiguration `json:"transformations,omitempty"`
	Sinks           []DataSinkApplyConfiguration           `json:"sinks,omitempty"`
	Exporters       []monitoringv1alpha1.DataExporter      `json:"exporters,omitempty"`
}

// ObservabilityDataExportSpecApplyConfiguration constructs an declarative configuration of the ObservabilityDataExportSpec type for use with
// apply.
func ObservabilityDataExportSpec() *ObservabilityDataExportSpecApplyConfiguration {
	return &ObservabilityDataExportSpecApplyConfiguration{}
}

// WithSources adds the given value to the Sources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sources field.
func (b *ObservabilityDataExportSpecApplyConfiguration) WithSources(values ...*DataSourceApplyConfiguration) *ObservabilityDataExportSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSources")
		}
		b.Sources = append(b.Sources, *values[i])
	}
	return b
}

// WithTransformations adds the given value to the Transformations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Transformations field.
func (b *ObservabilityDataExportSpecApplyConfiguration) WithTransformations(values ...*DataTransformationApplyConfiguration) *ObservabilityDataExportSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTransformations")
		}
		b.Transformations = append(b.Transformations, *values[i])
	}
	return b
}

// WithSinks adds the given value to the Sinks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sinks field.
func (b *ObservabilityDataExportSpecApplyConfiguration) WithSinks(values ...*DataSinkApplyConfiguration) *ObservabilityDataExportSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSinks")
		}
		b.Sinks = append(b.Sinks, *values[i])
	}
	return b
}

// WithExporters adds the given value to the Exporters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Exporters field.
func (b *ObservabilityDataExportSpecApplyConfiguration) WithExporters(values ...monitoringv1alpha1.DataExporter) *ObservabilityDataExportSpecApplyConfiguration {
	for i := range values {
		b.Exporters = append(b.Exporters, values[i])
	}
	return b
}
