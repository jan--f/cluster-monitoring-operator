// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openshift/api/monitoring/v1alpha1"
)

// PrometheusFederateSpecApplyConfiguration represents an declarative configuration of the PrometheusFederateSpec type for use
// with apply.
type PrometheusFederateSpecApplyConfiguration struct {
	Interval *v1alpha1.Duration `json:"interval,omitempty"`
	Target   *string            `json:"target,omitempty"`
	Matchers []string           `json:"matchers,omitempty"`
}

// PrometheusFederateSpecApplyConfiguration constructs an declarative configuration of the PrometheusFederateSpec type for use with
// apply.
func PrometheusFederateSpec() *PrometheusFederateSpecApplyConfiguration {
	return &PrometheusFederateSpecApplyConfiguration{}
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *PrometheusFederateSpecApplyConfiguration) WithInterval(value v1alpha1.Duration) *PrometheusFederateSpecApplyConfiguration {
	b.Interval = &value
	return b
}

// WithTarget sets the Target field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Target field is set to the value of the last call.
func (b *PrometheusFederateSpecApplyConfiguration) WithTarget(value string) *PrometheusFederateSpecApplyConfiguration {
	b.Target = &value
	return b
}

// WithMatchers adds the given value to the Matchers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Matchers field.
func (b *PrometheusFederateSpecApplyConfiguration) WithMatchers(values ...string) *PrometheusFederateSpecApplyConfiguration {
	for i := range values {
		b.Matchers = append(b.Matchers, values[i])
	}
	return b
}
