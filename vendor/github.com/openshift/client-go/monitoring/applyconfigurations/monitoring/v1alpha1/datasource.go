// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// DataSourceApplyConfiguration represents an declarative configuration of the DataSource type for use
// with apply.
type DataSourceApplyConfiguration struct {
	Name                   *string                                   `json:"name,omitempty"`
	Type                   *string                                   `json:"type,omitempty"`
	PrometheusFederateSpec *PrometheusFederateSpecApplyConfiguration `json:"prometheusFederateSpec,omitempty"`
}

// DataSourceApplyConfiguration constructs an declarative configuration of the DataSource type for use with
// apply.
func DataSource() *DataSourceApplyConfiguration {
	return &DataSourceApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *DataSourceApplyConfiguration) WithName(value string) *DataSourceApplyConfiguration {
	b.Name = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *DataSourceApplyConfiguration) WithType(value string) *DataSourceApplyConfiguration {
	b.Type = &value
	return b
}

// WithPrometheusFederateSpec sets the PrometheusFederateSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrometheusFederateSpec field is set to the value of the last call.
func (b *DataSourceApplyConfiguration) WithPrometheusFederateSpec(value *PrometheusFederateSpecApplyConfiguration) *DataSourceApplyConfiguration {
	b.PrometheusFederateSpec = value
	return b
}
