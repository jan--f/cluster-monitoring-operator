apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    api-approved.openshift.io: https://github.com/openshift/api/pull/TBD
    api.openshift.io/merged-by-featuregates: "true"
    description: OpenShift observability data export pipelines
    include.release.openshift.io/ibm-cloud-managed: "true"
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
    release.openshift.io/feature-set: TechPreviewNoUpgrade
  name: observabilitydataexport.monitoring.openshift.io
spec:
  group: monitoring.openshift.io
  names:
    kind: ObservabilityDataExport
    listKind: ObservabilityDataExportList
    plural: observabilitydataexport
    singular: observabilitydataexport
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "ObservabilityDataExport defines a set of observability data
          export pipelines \n Compatibility level 4: No compatibility is provided,
          the API can change at any point for any reason. These capabilities should
          not be used by applications needing long term support."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: spec describes the desired state of this ObservabilityDataExport
              object.
            properties:
              exporters:
                items:
                  type: object
                type: array
              sinks:
                items:
                  properties:
                    name:
                      type: string
                    prometheusRemoteWriteSpec:
                      properties:
                        name:
                          type: string
                        url:
                          type: string
                      type: object
                    type:
                      enum:
                      - PrometheusRemoteWrite
                      type: string
                  type: object
                type: array
              sources:
                items:
                  properties:
                    name:
                      type: string
                    prometheusFederateSpec:
                      description: not sure if validations a la https://github.com/kubernetes-sigs/controller-tools/issues/461#issuecomment-1982741599
                        make any sense here
                      properties:
                        interval:
                          description: 'Duration is a valid time duration that can
                            be parsed by Prometheus model.ParseDuration() function.
                            Supported units: y, w, d, h, m, s, ms Examples: `30s`,
                            `1m`, `1h20m15s`, `15d`'
                          pattern: ^(0|(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?)$
                          type: string
                        matchers:
                          items:
                            type: string
                          type: array
                        target:
                          type: string
                      type: object
                    type:
                      description: use discrimated unions here, see https://github.com/openshift/enhancements/blob/master/dev-guide/api-conventions.md#discriminated-unions
                      enum:
                      - PrometheusFederate
                      type: string
                  type: object
                type: array
              transformations:
                items:
                  properties:
                    dataTransformationSpec:
                      type: object
                    type:
                      enum:
                      - PrometheusRule
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: status describes the current state of this ObservabilityDataExport
              object.
            properties:
              conditions:
                description: conditions contains details on the state of the ObservabilityDataExport,
                  may be empty.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
